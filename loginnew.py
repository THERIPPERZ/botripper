
# -*- coding: utf-8 -*-
# Source Code : NoobLess Team #
# Arfine Meka.
# 
# -*- coding: utf-8 -*-
# ------------------------ IMPORT ------------------------ #

import time, random, sys, json, codecs, glob, urllib, pytz, ast, os, multiprocessing, subprocess, tempfile, string, six, urllib.parse, traceback, atexit, html5lib, re, wikipedia, ntpath, threading, base64, shutil, humanize, service, os.path, youtube_dl, requests
import urllib3
urllib3.disable_warnings()
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ------------------------ IMPORT ------------------------ #
from LineAPI.linepy import *
from liff.ttypes import LiffChatContext, LiffContext, LiffSquareChatContext, LiffNoneContext, LiffViewRequest
from LineAPI.akad import ChannelService,TalkService
from LineAPI.akad.ttypes import Message, Location, LoginRequest, ChatRoomAnnouncementContents, ContentType as Type
from thrift.protocol import TCompactProtocol, TBinaryProtocol, TProtocol
from thrift.transport import THttpClient, TTransport
from thrift.Thrift import TProcessor
from multiprocessing import Pool, Process
from multiprocessing.dummy import Pool as ThreadPool
from threading import Thread, activeCount
from time import sleep
from datetime import datetime, timedelta
from humanfriendly import format_timespan, format_size, format_number, format_length
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# ------------------------ LOGIN ------------------------ #
programStart = time.time()
client = LINE("que73104@bcaoo.com","online26")
client.log("Auth Token : " + str(client.authToken))
client.log("Timeline Token : " + str(client.tl.channelAccessToken))
clientMid = client.profile.mid
clientProfile = client.getProfile()
clientSettings = client.getSettings()
mid = client.getProfile().mid
clientPoll = OEPoll(client)
botStart = time.time()
msg_send = {}
temp_flood = {}
tz = pytz.timezone("Asia/Jakarta")
timeNow = datetime.now(tz=tz)
creator = ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']
adminbots = ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']
superz = creator + adminbots
with open('by.json', 'r') as fp:
    wait = json.load(fp)
settings ={"keyCommand":"","setKey":False}

xxxs = {
    "clock": False,
    "cName":"",
    }

def tokenchrome():
    Headers = {
    'User-Agent': "Line/2.1.5",
    'X-Line-Application': "CHROMEOS\t2.1.5\tlognselfbot\t12.1.1",
    "x-lal": "ja-US_US",
    }
    return Headers
    
def headersios():
    Headers = {
    'User-Agent': "Line/8.9.0",
    'X-Line-Application': "IOSIPAD\t11.2.5\tiPhone X\t11.2.5",
    "x-lal": "ja-US_US",
    }
    return Headers
    return Headers

def waktu(secs):
    mins, secs = divmod(secs,60)
    hours, mins = divmod(mins,60)
    days, hours = divmod(hours, 24)
    return '%02d ‡∏ß‡∏±‡∏ô %02d ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á %02d ‡∏ô‡∏≤‡∏ó‡∏µ %02d ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ' % (days, hours, mins, secs)

def restartBot():
    print ("[ INFO ] BOT RESTART")
    python = sys.executable
    os.execl(python, python, *sys.argv)
        
def backupData():
    try:
        backup = wait
        f = codecs.open('by.json','w','utf-8')
        json.dump(wait, f, sort_keys=True, indent=4, ensure_ascii=False)
        return True
    except:
        e = traceback.format_exc()
        client.sendMessage("u216a12909d301680792bd786f773e720",str(e))
        return False

def sendPost(to, data):
    xyz = LiffChatContext(to)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1602687308-GXq4Vvk9', xyzz)
    token = client.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    data = {"messages":[data]}
    requests.post(url, headers=headers, data=json.dumps(data))
def sendTemplate(group, data):
    xyz = LiffChatContext(group)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1602687308-GXq4Vvk9', xyzz)
    token = client.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    data = {"messages":[data]}
    requests.post(url, headers=headers, data=json.dumps(data))

def sendMention(to, text="", mids=[]):
        arrData = ""
        arr = []
        mention = "@Arfinee Meka "
        if mids == []:
            raise Exception("Invalid mids")
        if "@!" in text:
            if text.count("@!") != len(mids):
                raise Exception("Invalid mids")
            texts = text.split("@!")
            textx = ''
            h = ''
            for mid in range(len(mids)):
                h+= str(texts[mid].encode('unicode-escape'))
                textx += str(texts[mid])
                if h != textx:slen = len(textx)+h.count('U0');elen = len(textx)+h.count('U0') + 13
                else:slen = len(textx);elen = len(textx) + 13
                arrData = {'S':str(slen), 'E':str(elen), 'M':mids[mid]}
                arr.append(arrData)
                textx += mention
            textx += str(texts[len(mids)])
        else:
            textx = ''
            slen = len(textx)
            elen = len(textx) + 18
            arrData = {'S':str(slen), 'E':str(elen - 4), 'M':mids[0]}
            arr.append(arrData)
            textx += mention + str(text)
        client.sendMessage(to, textx, {'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
        
def command(text):
    pesan = text.lower()
    if settings["setKey"] == True:
        if pesan.startswith(settings["keyCommand"]):
            cmd = pesan.replace(settings["keyCommand"],"")
        else:
            cmd = "Undefined command"
    else:
        cmd = text.lower()
    return cmd
    
def menumessage():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuMessage = "„Äå ‚úØLÕôIÕôNÕôUÕôXÕô HÕôUÕôNÕôTÕôEÕôRÕô CÕôLÕôUÕôBÕô‚úØ „Äç" + "\n\n" + \
                    "‚Ä¢  /‡∏ö‡∏≠‡∏ó „Äå ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á „Äçüåü" + "\n" + \
                    "‚Ä¢  ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô1„Äå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö „Äçüåü" + "\n" + \
                    "‚Ä¢  ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô2„Äå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö „Äçüåü" + "\n" + \
                    "‚Ä¢  ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô3„Äå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö „Äçüåü" + "\n" + \
                    "‚Ä¢  ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô4„Äå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö „Äçüåü" + "\n" + \
                    "‚Ä¢  ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ö‡∏¥‡∏ô„Äå ‡∏Ç‡∏≠‡∏•‡∏¥‡πâ‡∏á‡∏ö‡∏¥‡∏ô „Äçüåü" + "\n" + \
                    "‚Ä¢  ‡∏≠‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö„Äå ‡∏≠‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö „Äçüåü" + "\n" + \
                    "‚Ä¢  /‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠„Äå ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ „Äçüåü" + "\n" + \
                    "‚Ä¢  ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ @„Äå ‡∏ï‡πà‡∏≠30‡∏ß‡∏±‡∏ô „Äçüåü" + "\n" + \
                    "‚Ä¢  ‡∏•‡∏ö @„Äå ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ „Äç üåü" + "\n" + \
                    "‚Ä¢  ‡πÄ‡∏û‡∏¥‡πà‡∏° @„Äå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤„Äçüåü" + "\n" + \
                    "‚Ä¢  ‡πÄ‡∏û‡∏¥‡πà‡∏°1‡∏ß‡∏±‡∏ô @„Äå ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß „Äçüåü" + "\n" + \
                    "‚Ä¢  /‡∏ö‡∏≤‡∏¢‡∏ö‡∏≠‡∏ó„Äå ‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å „Äçüåü" + "\n" + \
                    "‚Ä¢  /‡∏≠‡∏≠‡∏ô„Äå ‡πÄ‡∏ä‡∏Ñ‡∏ö‡∏≠‡∏ó „Äçüåü" + "\n" + \
                    "‚Ä¢  /‡∏£‡∏µ‡∏ö‡∏≠‡∏ó„Äå Restart „Äçüåü" + "\n" + \
                    "„Äå ÷Ü“Ωl√ü÷Ö‚Ñì GY ThaiLand...üáπüá≠ „Äç"
    return menuMessage
    
def clientBot(op):
    try:
        if op.type == 0:
            return   
                
        if op.type == 13:
            if op.param2 in superz:
                client.acceptGroupInvitation(op.param1)

        #if op.type in [22,24]:
         #   client.leaveRoom(op.param1)

        if op.type == 26:
            try:
                msg = op.message
                text = msg.text
                msg_id = msg.id
                receiver = msg.to
                sender = msg._from
                if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                    if msg.toType == 0:
                        if sender != client.profile.mid:
                            to = sender
                        else:
                            to = receiver
                    if msg.toType == 1:
                        to = receiver
                    if msg.toType == 2:
                        to = receiver
                    if msg.contentType == 0:
                        if text is None:
                            pass
                        else:
                            cmd = command(text)
                            if text.lower().startswith('# ') and sender in ['u7dd00c42c774ab7cf68913ffb078a88a']:
                                a=subprocess.getoutput(client.mainsplit(msg.text))
                                k = len(a)//10000
                                for aa in range(k+1):
                                    try:
                                        client.generateReplyMessage(msg.id)
                                        client.sendReplyMessage(msg.id,to,'{}'.format(a.strip()[aa*10000 : (aa+1)*10000]))
                                    except:
                                        client.sendMessage(to, "Done")

                            if text.lower() == "renew" and sender in ['u7dd00c42c774ab7cf68913ffb078a88a']:
                                try:
                                    sam = {'MSG_SENDER_ICON': "https://os.line.naver.jp/os/p/"+sender,'MSG_SENDER_NAME':  client.getContact(sender).displayName,}                            
                                    client.sendMessage(to, "Update Library Done", contentMetadata=sam)
                                    restartBot()
                                except:
                                    e = traceback.format_exc()
                                    client.sendMessage("u7dd00c42c774ab7cf68913ffb078a88a",str(e))

                            if text.lower().startswith('‡πÄ‡∏û‡∏¥‡πà‡∏° ') and sender in sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    key = eval(msg.contentMetadata["MENTION"])
                                    key1 = key["MENTIONEES"][0]["M"]
                                    if key1 not in wait['info']:
                                        pay = time.time()
                                        nama = str(text.split(' ')[1])
                                        wait['name'][nama] =  {"mid":key1,"pay":pay+60*60*24*30,"runtime":pay,"token":{}}
                                        wait['info'][key1] =  '%s' % nama
                                        sendMention(msg.to, ' „Äå Serivce „Äç\n@! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏õ‡∏¥‡∏î letter sealing ‡πÉ‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',[key1])
                                    else:
                                        sendMention(msg.to, ' „Äå Serivce „Äç\n@! ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß',[key1])
                                        
                            if text.lower().startswith('‡πÄ‡∏û‡∏¥‡πà‡∏°1‡∏ß‡∏±‡∏ô ') and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    key = eval(msg.contentMetadata["MENTION"])
                                    key1 = key["MENTIONEES"][0]["M"]
                                    if key1 not in wait['info']:
                                        pay = time.time()
                                        nama = str(text.split(' ')[1])
                                        wait['name'][nama] =  {"mid":key1,"pay":pay+60*60*24*1,"runtime":pay,"token":{}}
                                        wait['info'][key1] =  '%s' % nama
                                        sendMention(msg.to, ' „Äå Serivce „Äç\n@! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏õ‡∏¥‡∏î letter sealing ‡πÉ‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',[key1])
                                    else:
                                        sendMention(msg.to, ' „Äå Serivce „Äç\n@! ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß',[key1])
                                        
                            if text.lower().startswith('delsb') and sender in ['u7dd00c42c774ab7cf68913ffb078a88a']:
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                aa = [a for a in wait['info']]
                                try:
                                    listContact = aa[int(query)-1]
                                    if listContact in wait['info']:
                                        b = wait['info'][listContact]
                                        os.system('screen -S %s -X kill'%b)
                                        try:subprocess.getoutput('rm -rf {}'.format(b))
                                        except:pass
                                        del wait['info'][listContact]
                                        del wait['name'][b]
                                        sendMention(to, ' „Äå Serivce „Äç\n@! ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß', [listContact])
                                    else:
                                        sendMention(to, ' „Äå Serivce „Äç\n@! ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', [listContact])
                                except:pass

                            if text.lower().startswith('‡∏•‡∏ö ') and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    key = eval(msg.contentMetadata["MENTION"])
                                    key1 = key["MENTIONEES"][0]["M"]
                                    if key1 in wait['info']:
                                        b = wait['info'][key1]
                                        os.system('screen -S %s -X kill'%b)
                                        try:subprocess.getoutput('rm -rf {}'.format(b))
                                        except:pass
                                        del wait['info'][key1]
                                        del wait['name'][b]
                                        sendMention(to, ' „Äå Service „Äç\n@! ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß',[key1])
                                    else:
                                        sendMention(to, ' „Äå Serivce „Äç\n@! ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', [key1])

                            if text.lower() == '/‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠' and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                h = [a for a in wait['info']]
                                k = len(h)//20
                                for aa in range(k+1):
                                    if aa == 0:dd = '„Äå ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô „Äç';no=aa
                                    else:dd = '';no=aa*20
                                    msgas = dd
                                    for a in h[aa*20:(aa+1)*20]:
                                        no+=1
                                        if wait['name'][wait['info'][a]]["pay"] <= time.time():sd = '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏'
                                        else:sd = humanize.naturaltime(datetime.fromtimestamp(wait['name'][wait['info'][a]]["pay"]))
                                        if no == len(h):msgas+='\n{}. @! {}'.format(no,sd)
                                        else:msgas += '\n{}. @! {}'.format(no,sd)
                                    sendMention(to, msgas, h[aa*20:(aa+1)*20])

                            if text.lower() == 'killall':
                                if msg._from in ['u7dd00c42c774ab7cf68913ffb078a88a']:
                                    h = ''
                                    no=0
                                    for a in wait['info']:
                                        us = wait["info"][a]
                                        try:
                                            os.system('screen -S %s -X kill'%us)
                                        except:pass
                                    client.generateReplyMessage(msg.id)
                                    client.sendReplyMessage(msg.id,to,'Done Kill All Customer')

                            if text.lower() == "‡∏≠‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö":
                              if sender in wait['info']:
                                us = wait["info"][sender]
                                contact = client.getContact(sender)
                                os.system('screen -S {} -X quit'.format(us))
                                os.system('rm -rf {}'.format(us))
                                if msg.toType == 2:
                                    client.sendMessage(to, "Name: {}\nStatus: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß".format(contact.displayName))
                                else:
                                    sendMention(to, "„Äå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô „Äç\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß @! ", [sender])
                              else:
                                sendMention(to, ' „Äå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î „Äç\nHi @!\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô @! ', [sender, "u7dd00c42c774ab7cf68913ffb078a88a"])

                            if text.lower() == "‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô1":
                                client.generateReplyMessage(msg.id)
                                if sender in wait['info']:
                                        us = wait["info"][sender]
                                        ti = wait['name'][us]["pay"]-time.time()
                                        sec = int(ti %60)
                                        minu = int(ti/60%60)
                                        hours = int(ti/60/60 %24)
                                        days = int(ti/60/60/24)
                                        wait['name'][us]["pay"] = wait['name'][us]["pay"]
                                        if wait["name"][us]["pay"] <= time.time():
                                            os.system('rm -rf {}'.format(us))
                                            os.system('screen -S %s -X kill'%us)
                                            sendMention(to, ' „Äå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ „Äç\n Sorry @! ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡πâ‡∏ß', [sender])
                                        else:
                                            us = wait["info"][sender]
                                            try:
                                                def kentod():
                                                    a = headersios()
                                                    a.update({'x-lpqs' : '/api/v4/TalkService.do'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4/TalkService.do')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    qr = clients.getAuthQrcode(keepLoggedIn=1, systemName='Game')
                                                    link = "line://au/q/" + qr.verifier
                                                    sendMention(to,"„Äå Login „Äç\nUser: @!\nFile: {}".format(link), [sender])
                                                    a.update({"x-lpqs" : '/api/v4/TalkService.do', 'X-Line-Access': qr.verifier})
                                                    json.loads(requests.session().get('https://gd2.line.naver.jp/Q', headers=a).text)
                                                    a.update({'x-lpqs' : '/api/v4p/rs'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4p/rs')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    req = LoginRequest()
                                                    req.type = 1
                                                    req.verifier = qr.verifier
                                                    req.e2eeVersion = 1
                                                    res = clients.loginZ(req)
                                                    wait['name'][us]["token"] = res.authToken
                                                    token = wait['name'][us]["token"]
                                                    os.system('screen -S %s -X kill'%us)
                                                    os.system('cp -r botgame {}'.format(us))
                                                    os.system('cd {} && echo -n "{} \c" > token.txt'.format(us, token))
                                                    os.system('screen -dmS {}'.format(us))
                                                    os.system('screen -r {} -X stuff "cd {} && python3 ln.py \n"'.format(us, us))
                                                    contact = client.getContact(sender)
                                                    sendMention(to, "„Äå„Äå Done! „Äç\nName: {}\nMid: {}\n‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {} ‡∏ß‡∏±‡∏ô {} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {} ‡∏ô‡∏≤‡∏ó‡∏µ \nSuccess login user @! \n> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢(‡∏Å‡∏î‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏û‡∏≠) :\line://app/1602687308-GXq4Vvk9?type=text&text=‚Ä¢‚ÇÆ‚Ç¨‚Ç≥M‚Ä¢ñ§çƒø…™œ∞√ºX‡ΩΩ".format(us,sender,days,hours,minu), [sender])
                                                thread = threading.Thread(target=kentod)
                                                thread.daemon = True
                                                thread.start()
                                            except:
                                                pass
                                else:
                                    sendMention(to, ' „Äå Error „Äç\nHi @!\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô @! ', [sender, "u7dd00c42c774ab7cf68913ffb078a88a"])

                            if text.lower() == "‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô2":
                                client.generateReplyMessage(msg.id)
                                if sender in wait['info']:
                                        us = wait["info"][sender]
                                        ti = wait['name'][us]["pay"]-time.time()
                                        sec = int(ti %60)
                                        minu = int(ti/60%60)
                                        hours = int(ti/60/60 %24)
                                        days = int(ti/60/60/24)
                                        wait['name'][us]["pay"] = wait['name'][us]["pay"]
                                        if wait["name"][us]["pay"] <= time.time():
                                            os.system('rm -rf {}'.format(us))
                                            os.system('screen -S %s -X kill'%us)
                                            sendMention(to, ' „Äå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ „Äç\n Sorry @! ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡πâ‡∏ß', [sender])
                                        else:
                                            us = wait["info"][sender]
                                            try:
                                                def kentod():
                                                    a = headersios()
                                                    a.update({'x-lpqs' : '/api/v4/TalkService.do'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4/TalkService.do')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    qr = clients.getAuthQrcode(keepLoggedIn=1, systemName='Game')
                                                    link = "line://au/q/" + qr.verifier
                                                    sendMention(to,"„Äå Login „Äç\nUser: @!\nFile: {}".format(link), [sender])
                                                    a.update({"x-lpqs" : '/api/v4/TalkService.do', 'X-Line-Access': qr.verifier})
                                                    json.loads(requests.session().get('https://gd2.line.naver.jp/Q', headers=a).text)
                                                    a.update({'x-lpqs' : '/api/v4p/rs'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4p/rs')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    req = LoginRequest()
                                                    req.type = 1
                                                    req.verifier = qr.verifier
                                                    req.e2eeVersion = 1
                                                    res = clients.loginZ(req)
                                                    wait['name'][us]["token"] = res.authToken
                                                    token = wait['name'][us]["token"]
                                                    os.system('screen -S %s -X kill'%us)
                                                    os.system('cp -r du1 {}'.format(us))
                                                    os.system('cd {} && echo -n "{} \c" > token.txt'.format(us, token))
                                                    os.system('screen -dmS {}'.format(us))
                                                    os.system('screen -r {} -X stuff "cd {} && python3 online.py \n"'.format(us, us))
                                                    contact = client.getContact(sender)
                                                    sendMention(to, "„Äå„Äå Done! „Äç\nName: {}\nMid: {}\n‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {} ‡∏ß‡∏±‡∏ô {} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {} ‡∏ô‡∏≤‡∏ó‡∏µ \nSuccess login user @! \n> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢(‡∏Å‡∏î‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏û‡∏≠) :\line://app/1602687308-GXq4Vvk9?type=text&text=‚Ä¢‚ÇÆ‚Ç¨‚Ç≥M‚Ä¢ñ§çƒø…™œ∞√ºX‡ΩΩ".format(us,sender,days,hours,minu), [sender])
                                                thread = threading.Thread(target=kentod)
                                                thread.daemon = True
                                                thread.start()
                                            except:
                                                pass
                                else:
                                    sendMention(to, ' „Äå Error „Äç\nHi @!\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô @! ', [sender, "u7dd00c42c774ab7cf68913ffb078a88a"])

                            if text.lower() == "‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô3":
                                client.generateReplyMessage(msg.id)
                                if sender in wait['info']:
                                        us = wait["info"][sender]
                                        ti = wait['name'][us]["pay"]-time.time()
                                        sec = int(ti %60)
                                        minu = int(ti/60%60)
                                        hours = int(ti/60/60 %24)
                                        days = int(ti/60/60/24)
                                        wait['name'][us]["pay"] = wait['name'][us]["pay"]
                                        if wait["name"][us]["pay"] <= time.time():
                                            os.system('rm -rf {}'.format(us))
                                            os.system('screen -S %s -X kill'%us)
                                            sendMention(to, ' „Äå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ „Äç\n Sorry @! ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡πâ‡∏ß', [sender])
                                        else:
                                            us = wait["info"][sender]
                                            try:
                                                def kentod():
                                                    a = headersios()
                                                    a.update({'x-lpqs' : '/api/v4/TalkService.do'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4/TalkService.do')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    qr = clients.getAuthQrcode(keepLoggedIn=1, systemName='Game')
                                                    link = "line://au/q/" + qr.verifier
                                                    sendMention(to,"„Äå Login „Äç\nUser: @!\nFile: {}".format(link), [sender])
                                                    a.update({"x-lpqs" : '/api/v4/TalkService.do', 'X-Line-Access': qr.verifier})
                                                    json.loads(requests.session().get('https://gd2.line.naver.jp/Q', headers=a).text)
                                                    a.update({'x-lpqs' : '/api/v4p/rs'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4p/rs')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    req = LoginRequest()
                                                    req.type = 1
                                                    req.verifier = qr.verifier
                                                    req.e2eeVersion = 1
                                                    res = clients.loginZ(req)
                                                    wait['name'][us]["token"] = res.authToken
                                                    token = wait['name'][us]["token"]
                                                    os.system('screen -S %s -X kill'%us)
                                                    os.system('cp -r free {}'.format(us))
                                                    os.system('cd {} && echo -n "{} \c" > token.txt'.format(us, token))
                                                    os.system('screen -dmS {}'.format(us))
                                                    os.system('screen -r {} -X stuff "cd {} && python3 F1.py \n"'.format(us, us))
                                                    contact = client.getContact(sender)
                                                    sendMention(to, "„Äå„Äå Done! „Äç\nName: {}\nMid: {}\n‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {} ‡∏ß‡∏±‡∏ô {} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {} ‡∏ô‡∏≤‡∏ó‡∏µ \nSuccess login user @! \n> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢(‡∏Å‡∏î‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏û‡∏≠) :\line://app/1602687308-GXq4Vvk9?type=text&text=‚Ä¢‚ÇÆ‚Ç¨‚Ç≥M‚Ä¢ñ§çƒø…™œ∞√ºX‡ΩΩ".format(us,sender,days,hours,minu), [sender])
                                                thread = threading.Thread(target=kentod)
                                                thread.daemon = True
                                                thread.start()
                                            except:
                                                pass
                                else:
                                    sendMention(to, ' „Äå Error „Äç\nHi @!\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô @! ', [sender, "u7dd00c42c774ab7cf68913ffb078a88a"])

                            if text.lower() == "‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô4":
                                client.generateReplyMessage(msg.id)
                                if sender in wait['info']:
                                        us = wait["info"][sender]
                                        ti = wait['name'][us]["pay"]-time.time()
                                        sec = int(ti %60)
                                        minu = int(ti/60%60)
                                        hours = int(ti/60/60 %24)
                                        days = int(ti/60/60/24)
                                        wait['name'][us]["pay"] = wait['name'][us]["pay"]
                                        if wait["name"][us]["pay"] <= time.time():
                                            os.system('rm -rf {}'.format(us))
                                            os.system('screen -S %s -X kill'%us)
                                            sendMention(to, ' „Äå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ „Äç\n Sorry @! ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡πâ‡∏ß', [sender])
                                        else:
                                            us = wait["info"][sender]
                                            try:
                                                def kentod():
                                                    a = headersios()
                                                    a.update({'x-lpqs' : '/api/v4/TalkService.do'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4/TalkService.do')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    qr = clients.getAuthQrcode(keepLoggedIn=1, systemName='Game')
                                                    link = "line://au/q/" + qr.verifier
                                                    sendMention(to,"„Äå Login „Äç\nUser: @!\nFile: {}".format(link), [sender])
                                                    a.update({"x-lpqs" : '/api/v4/TalkService.do', 'X-Line-Access': qr.verifier})
                                                    json.loads(requests.session().get('https://gd2.line.naver.jp/Q', headers=a).text)
                                                    a.update({'x-lpqs' : '/api/v4p/rs'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4p/rs')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    req = LoginRequest()
                                                    req.type = 1
                                                    req.verifier = qr.verifier
                                                    req.e2eeVersion = 1
                                                    res = clients.loginZ(req)
                                                    wait['name'][us]["token"] = res.authToken
                                                    token = wait['name'][us]["token"]
                                                    os.system('screen -S %s -X kill'%us)
                                                    os.system('cp -r du1 {}'.format(us))
                                                    os.system('cd {} && echo -n "{} \c" > token.txt'.format(us, token))
                                                    os.system('screen -dmS {}'.format(us))
                                                    os.system('screen -r {} -X stuff "cd {} && python3 duck0.py \n"'.format(us, us))
                                                    contact = client.getContact(sender)
                                                    sendMention(to, "„Äå„Äå Done! „Äç\nName: {}\nMid: {}\n‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {} ‡∏ß‡∏±‡∏ô {} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {} ‡∏ô‡∏≤‡∏ó‡∏µ \nSuccess login user @! \n> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢(‡∏Å‡∏î‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏û‡∏≠) :\line://app/1602687308-GXq4Vvk9?type=text&text=‚Ä¢‚ÇÆ‚Ç¨‚Ç≥M‚Ä¢ñ§çƒø…™œ∞√ºX‡ΩΩ".format(us,sender,days,hours,minu), [sender])
                                                thread = threading.Thread(target=kentod)
                                                thread.daemon = True
                                                thread.start()
                                            except:
                                                pass
                                else:
                                    sendMention(to, ' „Äå Error „Äç\nHi @!\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô @! ', [sender, "u7dd00c42c774ab7cf68913ffb078a88a"])

                            if text.lower() == "‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ö‡∏¥‡∏ô":
                                client.generateReplyMessage(msg.id)
                                if sender in wait['info']:
                                        us = wait["info"][sender]
                                        ti = wait['name'][us]["pay"]-time.time()
                                        sec = int(ti %60)
                                        minu = int(ti/60%60)
                                        hours = int(ti/60/60 %24)
                                        days = int(ti/60/60/24)
                                        wait['name'][us]["pay"] = wait['name'][us]["pay"]
                                        if wait["name"][us]["pay"] <= time.time():
                                            os.system('rm -rf {}'.format(us))
                                            os.system('screen -S %s -X kill'%us)
                                            sendMention(to, ' „Äå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ „Äç\n Sorry @! ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡πâ‡∏ß', [sender])
                                        else:
                                            us = wait["info"][sender]
                                            try:
                                                def kentod():
                                                    a = headersios()
                                                    a.update({'x-lpqs' : '/api/v4/TalkService.do'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4/TalkService.do')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    qr = clients.getAuthQrcode(keepLoggedIn=1, systemName='Game')
                                                    link = "line://au/q/" + qr.verifier
                                                    sendMention(to,"„Äå Login „Äç\nUser: @!\nFile: {}".format(link), [sender])
                                                    a.update({"x-lpqs" : '/api/v4/TalkService.do', 'X-Line-Access': qr.verifier})
                                                    json.loads(requests.session().get('https://gd2.line.naver.jp/Q', headers=a).text)
                                                    a.update({'x-lpqs' : '/api/v4p/rs'})
                                                    transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4p/rs')
                                                    transport.setCustomHeaders(a)
                                                    protocol = TCompactProtocol.TCompactProtocol(transport)
                                                    clients = service.Client(protocol)
                                                    req = LoginRequest()
                                                    req.type = 1
                                                    req.verifier = qr.verifier
                                                    req.e2eeVersion = 1
                                                    res = clients.loginZ(req)
                                                    wait['name'][us]["token"] = res.authToken
                                                    token = wait['name'][us]["token"]
                                                    os.system('screen -S %s -X kill'%us)
                                                    os.system('cp -r logjs {}'.format(us))
                                                    os.system('cd {} && echo -n "{} \c" > token1.txt'.format(us, token))
                                                    os.system('screen -dmS {}'.format(us))
                                                    os.system('screen -r {} -X stuff "cd {} && python3 staff.py \n"'.format(us, us))
                                                    contact = client.getContact(sender)
                                                    sendMention(to, ' „Äå Succes „Äç\n @!', [sender])
                                                thread = threading.Thread(target=kentod)
                                                thread.daemon = True
                                                thread.start()
                                            except:
                                                pass
                                else:
                                    sendMention(to, ' „Äå Error „Äç\nHi @!\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô @! ', [sender, "u7dd00c42c774ab7cf68913ffb078a88a"])
                            if text.lower() == '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏â‡∏±‡∏ô' and sender in ['u7dd00c42c774ab7cf68913ffb078a88a']:
                                try:
                                    wait['name'][wait['info'][sender]]['pay'] = wait['name'][wait['info'][sender]]['pay']+60*60*24*30
                                    sendMention(to, ' „Äå Serivce „Äç\nHello @! your expired selfbot now {}'.format(humanize.naturaltime(datetime.fromtimestamp(wait['name'][wait['info'][msg._from]]["pay"]))),[msg._from])
                                except:
                                    e = traceback.format_exc()
                                    client.sendMessage("u7dd00c42c774ab7cf68913ffb078a88a",str(e))

                            if text.lower() == "/‡∏ö‡∏≤‡∏¢‡∏ö‡∏≠‡∏ó" and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                client.leaveGroup(to)

                            if text.lower().startswith('‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ ') and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    key = eval(msg.contentMetadata["MENTION"])
                                    key1 = key["MENTIONEES"][0]["M"]
                                    if key1 in wait['info']:
                                        wait['name'][wait['info'][key1]]['pay'] = wait['name'][wait['info'][key1]]['pay']+60*60*24*30
                                        sendMention(to, ' „Äå Serivce „Äç\nHi @! your expired selfbot now {}'.format(humanize.naturaltime(datetime.fromtimestamp(wait['name'][wait['info'][key1]]["pay"]))), [key1])
                                    else:pass                                  
                                       
                            if text.lower() == "/‡∏ö‡∏≠‡∏ó":
                                menuMessage = menumessage()
                                client.generateReplyMessage(msg.id)
                                client.sendReplyMessage(msg.id,to,str(menuMessage))

                            if cmd == "/‡∏≠‡∏≠‡∏ô":
                                timeNow = time.time()
                                runtime = timeNow - botStart
                                runtime = format_timespan(runtime)
                                client.sendMessage(to, "„Äå Time to ÷Ü“Ωl√ü÷Ö‚Ñì „Äç\n"+str(runtime))
                                
                            if cmd == 'Jam on'and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                if xxxs["clock"] == True:
                                    client.sendMessage(msg.to,"already on")
                                else:
                                    xxxs["clock"] = True
                                    now2 = datetime.now()
                                    nowT = datetime.strftime(now2,"(%H:%M:%S)")
                                    profile = client.getProfile()
                                    profile.displayName = xxxs["cName"] + nowT
                                    client.updateProfile(profile)
                                    client.sendMessage(msg.to,"done")
                                    
                            if cmd == 'Jam off'and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                if xxxs["clock"] == False:
                                    client.sendMessage(msg.to,"already off")
                                else:
                                    xxxs["clock"] = False
                                    client.sendMessage(msg.to,"done")
                                    
                            if cmd == 'up'and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                if xxxs["clock"] == True:
                                    now2 = datetime.now()
                                    nowT = datetime.strftime(now2,"(%H:%M)")
                                    profile = client.getProfile()
                                    profile.displayName = xxxs["cName"] + nowT
                                    client.updateProfile(profile)
                                    client.sendMessage(msg.to,"Jam Update")
                                else:
                                    client.sendMessage(msg.to,"Please turn on the name clock")

                            if cmd == 'grouplist'and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                groups = client.groups
                                ret_ = "‚ï≠‚îÄ‚îÄ[ Group List ]"
                                no = 0 
                                for gid in groups:
                                    group = client.getGroup(gid)
                                    ret_ += "\n‚îÇ {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                                    no += 1
                                ret_ += "\n‚ï∞‚îÄ‚îÄ[ Total {} Groups ]".format(str(len(groups)))
                                k = len(ret_)//10000
                                for aa in range(k+1):
                                    client.sendMessage(to,'{}'.format(ret_[aa*10000 : (aa+1)*10000]))
                            if text.lower() == 'rname'and sender in ['‡πÉ‡∏™‡πàmid‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô']:
                                sendMention(to, "@!", [clientMid])

                            if cmd.startswith('joinme '):
                              if sender in ["u7dd00c42c774ab7cf68913ffb078a88a","u08ad5aad07cb11092d7ef039bbdd8c65","u9874ee05a2e23c32af7adfedbb14dc1d"]:
                               text = msg.text.split()
                               number = text[1]
                               if number.isdigit():
                                groups = client.getGroupIdsJoined()
                                if int(number) < len(groups) and int(number) >= 0:
                                    groupid = groups[int(number)]
                                    group = client.getGroup(groupid)
                                    target = sender
                                    try:
                                        client.getGroup(groupid)
                                        client.findAndAddContactsByMid(target)
                                        client.inviteIntoGroup(groupid, [target])
                                        client.sendMessage(msg.to,"Succes invite to " + str(group.name))
                                    except:
                                        client.sendMessage(msg.to,"I no there baby")„Äå„Äç
                                    
                            if text.lower() == "/‡∏£‡∏µ‡∏ö‡∏≠‡∏ó" and sender in ['u7dd00c42c774ab7cf68913ffb078a88a','u08ad5aad07cb11092d7ef039bbdd8c65','u9874ee05a2e23c32af7adfedbb14dc1d']:
                                try:
                                    sam = {'MSG_SENDER_ICON': "https://os.line.naver.jp/os/p/"+sender,'MSG_SENDER_NAME':  client.getContact(sender).displayName,}                            
                                    client.sendMessage(to, "„Äå Restrat...üé∂ „Äç‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢üîã\n„Äå ‡∏û‡∏¥‡∏°‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏•‡∏ö‡∏≠‡∏ó „Äç‚Äã", contentMetadata=sam)
                                    restartBot()
                                except:
                                    e = traceback.format_exc()
                                    client.sendMessage("u7dd00c42c774ab7cf68913ffb078a88a",str(e))

                            if cmd.startswith('invme '):
                              if sender in ["u7dd00c42c774ab7cf68913ffb078a88a"]:
                                cond = cmd.split(" ")
                                num = int(cond[1])
                                gid = client.getGroupIdsJoined()
                                group = client.getCompactGroup(gid[num-1])
                                client.findAndAddContactsByMid(sender)
                                client.inviteIntoGroup(gid[num-1],[sender])

                            if cmd.startswith('unsend') and sender in ['u7dd00c42c774ab7cf68913ffb078a88a']:
                                try:
                                    args = text.split(' ')
                                    mes = 0
                                    try:
                                        mes = int(args[1])
                                    except:
                                        mes = 1
                                    M = client.getRecentMessagesV2(to, 1001)
                                    MId = []
                                    for ind,i in enumerate(M):
                                        if ind == 0:
                                            pass
                                        else:
                                            if i._from == clientMid:
                                                MId.append(i.id)
                                                if len(MId) == mes:
                                                    break
                                    for i in MId:
                                        client.unsendMessage(i)
#                                    client.sendMessage(to, '„Äå Unsend „Äç\nUnsend {} Message'.format(len(MId)))
                                except:
                                    e = traceback.format_exc()
                                    client.sendMessage("u7dd00c42c774ab7cf68913ffb078a88a",str(e))
            except:
                e = traceback.format_exc()
                client.sendMessage("u7dd00c42c774ab7cf68913ffb078a88a",str(e))
    except:
        e = traceback.format_exc()
        client.sendMessage("u7dd00c42c774ab7cf68913ffb078a88a",str(e))

def a2():
    now2 = datetime.now()
    nowT = datetime.strftime(now2,"%M")
    if nowT[14:] in ["10","20","30","40","50","00"]:
        return False
    else:
        return True

def nameUpdate():
    profile = client.getProfile()    
    while True:
        try:
            if xxxs["clock"] == True:
                now2 = datetime.now()
                nowT = datetime.strftime(now2,"(%H:%M)")
                profile.displayName = xxxs["cName"] + nowT
                client.updateProfile(profile)
            time.sleep(120)
            print("UpdateName",nowT) 
        except:
            pass
thread2 = threading.Thread(target=nameUpdate)
thread2.start()    

def run():
    while True:
        try:
            backupData()
            ops = clientPoll.singleTrace(count=50)
            if ops != None:
                for op in ops:
                    threads = []
                    for i in range(1):
                        thread = threading.Thread(target=clientBot(op))
                        threads.append(thread)
                        thread.start()
                        clientPoll.setRevision(op.revision)
            for thread in threads:
                thread.join()
        except:
            pass
            
if __name__ == "__main__":
    run()